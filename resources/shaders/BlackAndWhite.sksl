uniform shader texture;

uniform float red;
uniform float yellow;
uniform float green;
uniform float cyan;
uniform float blue;
uniform float magenta;

half3 rgb2hsv(half3 c)
{
	half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	half4 p = mix(half4(c.bg, K.wz), half4(c.gb, K.xy), step(c.b, c.g));
	half4 q = mix(half4(p.xyw, c.r), half4(c.r, p.yzx), step(p.x, c.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return half3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

half3 hsv2rgb(half3 c)
{
	half4 K = half4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	half3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

half4 main(float2 p) {
	half3 base = texture.eval(p).rgb;
	base = rgb2hsv(base);

	float hueInterval = 1.0 / 6.0;
	float startBrightness = 0.0;
	float endBrightness = 0.0;
	if (0.0 <= base.x && base.x < hueInterval)
	{
			startBrightness = red;
			endBrightness = yellow;
	}
	else if (hueInterval <= base.x && base.x < 2.0 * hueInterval)
	{
			startBrightness = yellow;
			endBrightness = green;
	}
	else if (2.0 * hueInterval <= base.x && base.x < 3.0 * hueInterval)
	{
			startBrightness = green;
			endBrightness = cyan;
	}
	else if (3.0 * hueInterval <= base.x && base.x < 4.0 * hueInterval)
	{
			startBrightness = cyan;
			endBrightness = blue;
	}
	else if (4.0 * hueInterval <= base.x && base.x < 5.0 * hueInterval)
	{
			startBrightness = blue;
			endBrightness = magenta;
	}
	else
	{
			startBrightness = magenta;
			endBrightness = red;
	}

	float fStartHue = (hueInterval - mod(base.x, hueInterval)) / hueInterval * 100.0;
	float fSaturation = base.y * 100.0;
	float fBrightness = base.z * 100.0;

	float fNewBrightness = (fStartHue * startBrightness / 100.0) + (100.0 - fStartHue) * (endBrightness / 100.0);
	fNewBrightness = ((100.0 - fSaturation) * fBrightness) / 100.0 + ((((fNewBrightness * fSaturation) / 100.0) * fBrightness) / 100.0);
	fNewBrightness = clamp(fNewBrightness / 100.0, 0.0, 1.0);

	half3 res = hsv2rgb(half3(0.0, 0.0, fNewBrightness));
	return half4(res, 1.0);
}
